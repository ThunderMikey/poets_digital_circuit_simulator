<?xml version="1.0"?>
<Graphs xmlns="https://poets-project.org/schemas/virtual-graph-schema-v2">
	<GraphType id="circuit_gates">
		<Documentation>
		This is a library of gates for digital circuit simulations.
		gate_type:
			nand, or, gnd, vcc
		</Documentation>

		<MetaData>
		</MetaData>

		<Properties>
			<Scalar name="max_ticks" type="uint32_t" default="100"/>
			<!-- when complete: when all inputs are received,
			when false: send whenever a message a received from any input,
				and set `completed` to false -->
			<Scalar name="only_send_when_complete" type="uint8_t" default="1"/>
		</Properties>
		<SharedCode><![CDATA[
			uint8_t and2_gate(uint8_t in0, uint8_t in1){
				return (uint8_t)(in0 && in1);
			}
			uint8_t nand2_gate(uint8_t in0, uint8_t in1){
				return (uint8_t)(!(in0 && in1));
			}
			uint8_t or2_gate(uint8_t in0, uint8_t in1){
				return (uint8_t)(in0 || in1);
			}
			uint8_t xor2_gate(uint8_t in0, uint8_t in1){
				uint8_t sum = in0 + in1;
				return (uint8_t)(sum == 1);
			}
		]]>
		</SharedCode>
		<MessageTypes>
			<MessageType id="__init__">
				<Documentation>
					This doesn't have any properties
				</Documentation>
			</MessageType>

			<MessageType id="wire">
				<Documentation>
					This meesage type represents a wire.
				</Documentation>
				<Message>
					<Scalar name="logic" type="uint8_t"/>
					<!-- signal if both all inputs are received, therefore
					output is valid. Can propergate if debugging purposes.
					Will be potentially useful for debugging combinatorial circuits
					 -->
					 <!-- REVISIT: pack `logic` and `completed` to reduce message
					 size -->
					<Scalar name="completed" type="uint8_t"/>
				</Message>
            </MessageType>
			<MessageType id="io_oracle_imsg">
				<Documentation>
					Message send to input terminals and receive from output terminals.
				</Documentation>
				<Message>
					<!-- input terminal id -->
					<Scalar name="tid" type="uint32_t"/>
					<Scalar name="logic" type="uint8_t"/>
				</Message>
			</MessageType>
			<MessageType id="io_oracle_pmsg">
				<Documentation>
					Message for simulation results printing.
				</Documentation>
				<Message>
					<Scalar name="feedin" type="uint32_t"/>
					<Scalar name="result" type="uint32_t"/>
				</Message>
			</MessageType>
		</MessageTypes>

		<DeviceTypes>
			<DeviceType id="io_oracle">
			<!-- oracle sends message to all input terminals each cycle with
			only one valid message to a single input terminal,
			indentified by terminal id -->
				<Properties>
					<Scalar type="uint32_t" name="no_inputs" />
					<Scalar type="uint32_t" name="no_outputs" />
					<!-- 2^no_inputs -->
					<Scalar type="uint32_t" name="combinations" />
				</Properties>
				<State>
					<Scalar type="uint32_t" name="t_count" />
					<Scalar type="uint32_t" name="iteration" />
					<Scalar type="uint32_t" name="result" />
					<!--
					O: send to input terminals
					1: wait for output terminals
					2: print io values in group
					-->
					<Scalar type="uint8_t" name="status" />
				</State>
				<InputPin name="__init__" messageTypeId="__init__">
				<OnReceive>
				<![CDATA[
					deviceState->t_count=0;
					deviceState->iteration=0;
					deviceState->result=0;
				]]>
				</OnReceive>
				</InputPin>
				<ReadyToSend><![CDATA[
					if(deviceState->status == 0){
						*readyToSend = OUTPUT_FLAG_io_oracle_it_feed;
					}
					else if(deviceState->status == 1){
						*readyToSend = 0;
					}
					else if(deviceState->status == 2){
						*readyToSend = OUTPUT_FLAG_io_oracle_print;
					}
					else{
						*readyToSend = 0;
					}
				]]>
				</ReadyToSend>
				<OutputPin name="it_feed" messageTypeId="io_oracle_imsg">
					<OnSend><![CDATA[
					// masked with iteration
					if(deviceState->t_count < deviceProperties->no_inputs){
						// take bitwise value and shift back down to bit 0
						message->logic = (deviceState->iteration & (1<<(deviceState->t_count)))>>deviceState->t_count;
						message->tid = deviceState->t_count;
						deviceState->t_count++;
					}
					if(deviceState->t_count >= deviceProperties->no_inputs){
						// change state to ot_receive
						deviceState->status = 1;
						deviceState->t_count = 0;
					}
					]]>
					</OnSend>
				</OutputPin>
				<InputPin name="ot_receive" messageTypeId="io_oracle_imsg">
					<OnReceive><![CDATA[
					// masked with iteration
					if(deviceState->t_count<deviceProperties->no_outputs){
						deviceState->result |= (message->logic & 1) << message->tid;
						deviceState->t_count++;
					}
					if(deviceState->t_count >= deviceProperties->no_outputs){
						// change state to print
						deviceState->status = 2;
						deviceState->t_count = 0;
					}
					]]>
					</OnReceive>
				</InputPin>
				<OutputPin name="print" messageTypeId="io_oracle_pmsg">
					<OnSend><![CDATA[
						message->feedin = deviceState->iteration;
						message->result = deviceState->result;
						handler_log(1, "feedin: %u", deviceState->iteration);
						handler_log(1, "result: %u", deviceState->result);
						deviceState->iteration++;
						// iteration start with 0, combinations start with 0
						if(deviceState->iteration > deviceProperties->combinations){
							handler_exit(0);
						}
						deviceState->result = 0;
						// change state to it_feed
						deviceState->status = 0;
					]]>
					</OnSend>
				</OutputPin>
			</DeviceType>
			<DeviceType id="nand">
				<Properties>
					<Scalar type="uint8_t" name="output_logic" default="0" />
					<Scalar type="uint8_t" name="no_inputs" default="2" />
				</Properties>
				<State>
					<Scalar type="uint8_t" name="logic_in0" />
					<Scalar type="uint8_t" name="logic_in1" />
					<Scalar type="uint8_t" name="A_recv" />
					<Scalar type="uint8_t" name="B_recv" />
				</State>
				<InputPin name="__init__" messageTypeId="__init__">
		  			<OnReceive><![CDATA[
						deviceState->logic_in0 = 0;
						deviceState->logic_in1 = 0;
						deviceState->A_recv = 0;
						deviceState->B_recv = 0;
					]]>
					</OnReceive>
				</InputPin>
				<!-- OUTPUT_FLAG_{deviceTypeId}_{currPinName} -->
				<ReadyToSend><![CDATA[
					if(deviceState->A_recv && deviceState->B_recv){
						*readyToSend = OUTPUT_FLAG_nand_Y;
					}
					else{
						*readyToSend = 0;
					}
				]]>
				</ReadyToSend>

				<InputPin name="A" messageTypeId="wire">
					<OnReceive><![CDATA[
						deviceState->logic_in0 = message->logic;
						deviceState->A_recv = 1;
					]]>
					</OnReceive>
				</InputPin>

				<InputPin name="B" messageTypeId="wire">
					<OnReceive><![CDATA[
						deviceState->logic_in1 = message->logic;
						deviceState->B_recv = 1;
					]]>
					</OnReceive>
				</InputPin>

				<OutputPin name="Y" messageTypeId="wire">
					<OnSend><![CDATA[
						message->logic = nand2_gate(
									deviceState->logic_in0,
									deviceState->logic_in1);
						deviceState->A_recv = 0;
						deviceState->B_recv = 0;
					]]>
					</OnSend>
				</OutputPin>
			</DeviceType>

			<DeviceType id="not">
				<Properties>
					<Scalar type="uint8_t" name="output_logic" default="0" />
				</Properties>
				<State>
					<Scalar type="uint32_t" name="no_ticks" />
					<Scalar type="uint8_t" name="logic_in0" />
					<Scalar type="uint8_t" name="do_send" />
				</State>
				<InputPin name="__init__" messageTypeId="__init__">
		  			<OnReceive><![CDATA[
						deviceState->logic_in0 = 0;
						deviceState->do_send = 0;
					]]>
					</OnReceive>
				</InputPin>
				<!-- OUTPUT_FLAG_{deviceTypeId}_{currPinName} -->
				<ReadyToSend><![CDATA[
					if(deviceState->do_send == 1){
						*readyToSend = OUTPUT_FLAG_not_Y;
					}
					else{
						*readyToSend = 0;
					}
				]]>
				</ReadyToSend>

				<InputPin name="A" messageTypeId="wire">
					<OnReceive><![CDATA[
						deviceState->logic_in0 = message->logic;
						deviceState->do_send = 1;
					]]>
					</OnReceive>
				</InputPin>

				<OutputPin name="Y" messageTypeId="wire">
					<OnSend><![CDATA[
            message->logic = (uint8_t)(!deviceState->logic_in0);
						deviceState->do_send = 0;
					]]>
					</OnSend>
				</OutputPin>
			</DeviceType>

			<DeviceType id="gnd">
				<Properties>
				</Properties>
				<State>
					<Scalar type="uint32_t" name="no_ticks" />
				</State>
				<!-- OUTPUT_FLAG_{deviceTypeId}_{currPinName} -->
				<ReadyToSend><![CDATA[
					*readyToSend = OUTPUT_FLAG_gnd_G;
				]]>
				</ReadyToSend>

				<OutputPin name="G" messageTypeId="wire">
					<OnSend><![CDATA[
						message->logic = 0;
					]]>
					</OnSend>
				</OutputPin>
			</DeviceType>

			<DeviceType id="vcc">
				<Properties>
				</Properties>
				<State>
					<Scalar type="uint32_t" name="no_ticks" />
				</State>
				<!-- OUTPUT_FLAG_{deviceTypeId}_{currPinName} -->
				<ReadyToSend><![CDATA[
					*readyToSend = OUTPUT_FLAG_vcc_P;
				]]>
				</ReadyToSend>

				<OutputPin name="P" messageTypeId="wire">
					<OnSend><![CDATA[
						message->logic = 1;
					]]>
					</OnSend>
				</OutputPin>
			</DeviceType>

			<DeviceType id="input_terminal">
				<Properties>
					<!-- unique input terminal id -->
					<Scalar type="uint8_t" name="tid"/>
				</Properties>
				<State>
					<Scalar type="uint8_t" name="current_iteration" />
					<Scalar type="uint8_t" name="current_logic" />
					<Scalar type="uint8_t" name="do_send" />
				</State>
				<InputPin name="__init__" messageTypeId="__init__">
					<OnReceive><![CDATA[
						deviceState->current_iteration = 0;
						deviceState->current_logic = 0;
						deviceState->do_send = 0;
					]]>
					</OnReceive>
				</InputPin>
				<InputPin name="io_oracle_receive" messageTypeId="io_oracle_imsg">
					<OnReceive><![CDATA[
						if(message->tid == deviceProperties->tid){
							deviceState->current_logic = message->logic;
							deviceState->do_send = 1;
						}
					]]>
					</OnReceive>
				</InputPin>
				<ReadyToSend><![CDATA[
					if(deviceState->do_send == 1){
						*readyToSend = OUTPUT_FLAG_input_terminal_out;
					}
					else{
						*readyToSend = 0;
					}
				]]>
				</ReadyToSend>
				<OutputPin name="out" messageTypeId="wire">
					<OnSend><![CDATA[
						message->logic = deviceState->current_logic;
						handler_log(2, "it: %u, value: %u, iteration: %u",
							(uint32_t) deviceProperties->tid,
							(uint32_t) deviceState->current_logic,
							(uint32_t) deviceState->current_iteration
							);
						deviceState->current_iteration++;
						deviceState->do_send = 0;
					]]>
					</OnSend>
				</OutputPin>
			</DeviceType>

			<DeviceType id="output_terminal">
				<Properties>
					<!-- unique input terminal id -->
					<Scalar type="uint8_t" name="tid"/>
				</Properties>
				<State>
					<Scalar type="uint8_t" name="do_send"/>
					<Scalar type="uint8_t" name="current_logic"/>
				</State>
				<ReadyToSend><![CDATA[
					if(deviceState->do_send == 1){
						*readyToSend=OUTPUT_FLAG_output_terminal_out;
					}
					else{
						*readyToSend = 0;
					}
				]]>
				</ReadyToSend>
				<InputPin name="__init__" messageTypeId="__init__">
					<OnReceive><![CDATA[
						deviceState->do_send = 0;
						deviceState->current_logic = 0;
					]]>
					</OnReceive>
				</InputPin>
				<InputPin name="receive" messageTypeId="wire">
					<OnReceive><![CDATA[
						deviceState->current_logic = message->logic;
						deviceState->do_send = 1;
					]]>
					</OnReceive>
				</InputPin>
				<OutputPin name="out" messageTypeId="io_oracle_imsg">
					<OnSend><![CDATA[
						message->logic = deviceState->current_logic;
						message->tid = deviceProperties->tid;
						handler_log(2, "ot: %u, value: %u",
							(uint32_t) deviceProperties->tid,
							(uint32_t) deviceState->current_logic);
						deviceState->do_send = 0;
					]]>
					</OnSend>
				</OutputPin>
			</DeviceType>

			<DeviceType id="exit_node">
				<Properties>
					<!-- 0: no max, [1, 2^32-1]: max_ticks -->
					<Scalar type="uint32_t" name="max_ticks" default="100" />
				</Properties>
				
				<State>
					<Scalar type="uint32_t" name="no_ticks" />
				</State>
				<InputPin name="__init__" messageTypeId="__init__">
		  			<OnReceive><![CDATA[
						deviceState->no_ticks = 0;
					]]>
					</OnReceive>
				</InputPin>
				<ReadyToSend><![CDATA[
					*readyToSend=0;
				]]>
				</ReadyToSend>

				<InputPin name="done" messageTypeId="wire">
					<OnReceive><![CDATA[
						deviceState->no_ticks++;
            handler_log(2, "tick number: %u",
              deviceState->no_ticks);
            if(deviceState->no_ticks >= deviceProperties->max_ticks){
							handler_exit(0);
						}
					]]>
					</OnReceive>
				</InputPin>
			</DeviceType>
		</DeviceTypes>
	</GraphType>
</Graphs>

